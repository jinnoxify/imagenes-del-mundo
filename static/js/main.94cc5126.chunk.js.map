{"version":3,"sources":["Components/Image.js","Components/UserInfo.js","Components/Invoice.js","App.js","serviceWorker.js","index.js"],"names":["Image","img","className","src","alt","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","border","boxShadow","shadows","padding","spacing","color","UserInfo","user","classes","React","useState","modalStyle","open","setOpen","userQuery","setUserQuery","images","setImages","score1","setScore1","score2","setScore2","score3","setScore3","open1","setOpen1","invoiceLink","setInvoiceLink","goNext","a","Axios","post","date","dueDate","client","items","id","price","quantity","authorization","invoice","console","log","body","style","to","Button","onClick","variant","submit","e","preventDefault","get","imagesInfo","data","hits","value","onChange","target","placeholder","type","Avatar","slice","map","image","webformatURL","Modal","onClose","aria-labelledby","aria-describedby","Invoice","App","setUser","useEffect","username","prompt","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.94cc5126.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Image.css\";\r\n\r\nfunction Image({ img }) {\r\n  return (\r\n    <div className=\"image\">\r\n      <img className=\"image__img\" src={img} alt=\"img\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Image;\r\n","import { Avatar, Button } from \"@material-ui/core\";\r\nimport Axios from \"axios\";\r\nimport React, { useState } from \"react\";\r\nimport \"./UserInfo.css\";\r\nimport StarIcon from \"@material-ui/icons/Star\";\r\nimport Image from \"./Image\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction getModalStyle() {\r\n  const top = 50;\r\n  const left = 50;\r\n\r\n  return {\r\n    top: `${top}%`,\r\n    left: `${left}%`,\r\n    transform: `translate(-${top}%, -${left}%)`,\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    position: \"absolute\",\r\n    width: 500,\r\n    backgroundColor: \"#4f4fd4\",\r\n    border: \"2px solid black\",\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n    color: \"white\",\r\n  },\r\n}));\r\n\r\nfunction UserInfo({ user }) {\r\n  const classes = useStyles();\r\n  const [modalStyle] = React.useState(getModalStyle);\r\n  const [open, setOpen] = React.useState(false);\r\n  const [userQuery, setUserQuery] = useState(\"\");\r\n  const [images, setImages] = useState([]);\r\n  const [score1, setScore1] = useState(0);\r\n  const [score2, setScore2] = useState(0);\r\n  const [score3, setScore3] = useState(0);\r\n  const [open1, setOpen1] = useState(false);\r\n  const [invoiceLink, setInvoiceLink] = useState([]);\r\n\r\n  const goNext = async () => {\r\n    let invoice = await Axios.post(\r\n      \"https://api.alegra.com/api/v1/invoices\",\r\n      {\r\n        date: \"2015-11-15\",\r\n        dueDate: \"2015-12-15\",\r\n        client: 2,\r\n        items: [\r\n          {\r\n            id: 1,\r\n            price: 120,\r\n            quantity: 20,\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        authorization:\r\n          \"b3NjYXJwZXJlem5hdmFycm8xOTk3QGdtYWlsLmNvbTo3ODk0NTY3ODk0NTZsb2w=\",\r\n      }\r\n    );\r\n    setInvoiceLink(invoice);\r\n  };\r\n\r\n  console.log(invoiceLink);\r\n\r\n  const body = (\r\n    <div style={modalStyle} className={classes.paper}>\r\n      <h2>Tenemos un ganador!! Felicidades {user}</h2>\r\n      <Link to=\"/invoice\">\r\n        <Button\r\n          onClick={goNext}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          className=\"modalButton\"\r\n        >\r\n          Continuar\r\n        </Button>\r\n      </Link>\r\n    </div>\r\n  );\r\n\r\n  const submit = async (e) => {\r\n    e.preventDefault();\r\n    let imagesInfo = await Axios.get(\r\n      `https://pixabay.com/api/?key=18669622-9631d9eb9f3f38ee14a1679a9&q=${userQuery}&per_page=15`\r\n    );\r\n    setImages(imagesInfo.data.hits);\r\n    setOpen1(true);\r\n  };\r\n\r\n  const Choose1 = () => {\r\n    setScore1(score1 + 3);\r\n    if (score1 === 18) {\r\n      setScore1(20);\r\n      setOpen(true);\r\n    }\r\n  };\r\n  const Choose2 = () => {\r\n    setScore2(score2 + 3);\r\n    if (score2 === 18) {\r\n      setScore2(20);\r\n      setOpen(true);\r\n    }\r\n  };\r\n  const Choose3 = () => {\r\n    setScore3(score3 + 3);\r\n    if (score3 === 18) {\r\n      setScore3(20);\r\n      setOpen(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"userInfo\">\r\n      <h2>{user}</h2>\r\n      <form>\r\n        <input\r\n          value={userQuery}\r\n          onChange={(e) => setUserQuery(e.target.value)}\r\n          className=\"userInfo__input\"\r\n          placeholder=\"Ingrese su palabra\"\r\n          type=\"text\"\r\n        />\r\n        <button\r\n          type=\"submit\"\r\n          onClick={submit}\r\n          className=\"userInfo__button\"\r\n        ></button>\r\n      </form>\r\n      {open1 && (\r\n        <>\r\n          <div className=\"vendor\">\r\n            <div className=\"vendorInfo\">\r\n              <Avatar />\r\n              <h3 className=\"vendorName\">Vendedor 1</h3>\r\n              <div className=\"vendorScore\">\r\n                <p>\r\n                  <span>{score1}</span>/20\r\n                </p>\r\n                <StarIcon />\r\n              </div>\r\n            </div>\r\n            <div className=\"vendorInfo\">\r\n              <Avatar />\r\n              <h3 className=\"vendorName\">Vendedor 2</h3>\r\n              <div className=\"vendorScore\">\r\n                <p>\r\n                  <span>{score2}</span>/20\r\n                </p>\r\n                <StarIcon />\r\n              </div>\r\n            </div>\r\n            <div className=\"vendorInfo\">\r\n              <Avatar />\r\n              <h3 className=\"vendorName\">Vendedor 3</h3>\r\n              <div className=\"vendorScore\">\r\n                <p>\r\n                  <span>{score3}</span>/20\r\n                </p>\r\n                <StarIcon />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"vendor__image\">\r\n            {images.slice(0, 3).map((image) => (\r\n              <Image img={image.webformatURL} />\r\n            ))}\r\n          </div>\r\n          <div className=\"vendor__button\">\r\n            <Button onClick={Choose1} variant=\"contained\" color=\"primary\">\r\n              Escoger\r\n            </Button>\r\n            <Button onClick={Choose2} variant=\"contained\" color=\"primary\">\r\n              Escoger\r\n            </Button>\r\n            <Button onClick={Choose3} variant=\"contained\" color=\"primary\">\r\n              Escoger\r\n            </Button>\r\n            <Modal\r\n              open={open}\r\n              onClose={() => setOpen(false)}\r\n              aria-labelledby=\"simple-modal-title\"\r\n              aria-describedby=\"simple-modal-description\"\r\n            >\r\n              {body}\r\n            </Modal>\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserInfo;\r\n","import React from \"react\";\r\nimport \"./Invoice.css\";\r\n\r\nfunction Invoice() {\r\n  return (\r\n    <div className=\"invoice\">\r\n      <h2>Facturación</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Invoice;\r\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport UserInfo from \"./Components/UserInfo\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Invoice from \"./Components/Invoice\";\n\nfunction App() {\n  const [user, setUser] = useState(\"\");\n  useEffect(() => {\n    let username = prompt(\"Ingrese su nombre\");\n    setUser(username);\n  }, []);\n  return (\n    <Router>\n      <Switch>\n        <div className=\"app\">\n          <h1 className=\"app__title\">IMAGENES DEL MUNDO</h1>\n          <div className=\"app__container\">\n            <Route\n              exact\n              path=\"/imagenes-del-mundo\"\n              render={() => <UserInfo user={user} />}\n            />\n            <Route exact path=\"/invoice\" component={Invoice} />\n          </div>\n        </div>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}